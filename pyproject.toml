[tool.poetry]
name = "sigmadsp"
license = "GPL-3.0-or-later"
version = "0.0.0"
description = "A package for controlling Analog Devices Sigma DSP chipsets."
readme = "README.md"
authors = ["Adrian Figueroa <elagil@takanome.de>"]
repository = "https://github.com/elagil/sigmadsp"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
]

[tool.poetry.scripts]
sigmadsp-backend = "sigmadsp.backend:main"
sigmadsp = "sigmadsp.frontend:sigmadsp"

[tool.poetry.dependencies]
python = "^3.9"
PyYAML = "^6.0"
spidev = "^3.5"
retry = "^0.9.2"
smbus2 = "^0.4.1"
gpiozero = "^1.6.2"
click = "^8.1.3"
grpcio = "^1.64.1"
protobuf = "^5.27.1"
rpi-gpio = "^0.7.1"

[tool.poetry.group.dev.dependencies]
grpcio-tools = "^1.64.1"
pytest = "^8.2.2"
hypothesis = "^6.47.5"
mypy-protobuf = "^3.3.0"
debugpy = "^1.6.3"

[tool.poetry-dynamic-versioning]
enable = true
bump = true
latest-tag = true
vcs = "git"
style = "semver"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# pycodestyle (E)
# pyflakes (F)
# pydocstyle (D)
# pyupgrade (UP)
# pylint (PL)
# enforce use of pathlib (PTH)
# disallow access to private members (SLF)
# stricter return type handling (RET)
# exception linting (RSE)
# naming conventions (N)
# isort (I)
# Unused arguments (ARG)
# Ruff specific rules (RUF)
lint.select = [
    "E",
    "F",
    "D",
    "UP",
    "PL",
    "PTH",
    "SLF",
    "RET",
    "RSE",
    "N",
    "I",
    "ARG",
    "RUF",
]

# Pylint refactor (PLR), pylint complexity warnings (PLC0414)
lint.ignore = ["PLR", "PLC0414"]

line-length = 120
target-version = "py39"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
ignore_missing_imports = true
check_untyped_defs = true
